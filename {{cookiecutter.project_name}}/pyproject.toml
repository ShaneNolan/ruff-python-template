[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "0.1.0"
description = ""
authors = []
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"

[tool.poetry.group.dev.dependencies]
mypy = "^0.991"
pytest = "^7.2.1"
pre-commit = "^3.0.2"
ruff = "0.0.239"
black = "^23.1.0"
coverage = "^7.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
target-version = ["py310"]
skip-string-normalization = true

[tool.ruff]
target-version = "py310"

format = "grouped"

select = [
  # pyflakes
  "F",
  # pycodestyle
  "E",
  "W",
  # mccabe
  "C90",
  # isort
  # "I",
  # pep8-naming
  "N",
  # pydocstyle,
  "D",
  # pyupgrade
  "UP",
  # flake8-2022
  # "YTT",
  # flake8-annotations
  # "ANN",
  # flake8-bandit
  "S",
  # flake8-blind-except
  "BLE",
  # flake8-boolean-trap
  # "FBT",
  # flake8-bugbear
  "B",
  # flake8-builtins
  "A",
  # flake8-commas
  "COM",
  # flake8-comprehensions
  "C4",
  # flake8-datetimez
  "DTZ",
  # flake8-debugger
  "T10",
  # flake8-errmsg
  # "EM",
  # flake8-executable
  # "EXE",
  # flake8-implicit-str-concat
  "ISC",
  # flake8-import-conventions
  "ICN",
  # flake8-logging-format
  # "G",
  # flake8-no-pep420
  "INP",
  # flake8-pie
  "PIE",
  # flake8-print
  "T20",
  # flake8-pytest-style
  "PT",
  # flake8-quotes
  "Q",
  # flake8-return
  "RET",
  # flake8-simplify
  "SIM",
  # flake8-tidy-imports
  "TID",
  # flake8-type-checking
  # "TCH",
  # flake8-unused-arguments
  "ARG",
  # flake8-use-pathlib
  "PTH",
  # eradicate
  # "ERA",
  # pandas-vet
  # "PD",
  # pygrep-hooks
  "PGH",
  # pylint
  "PLE", "PLR", "PLW",
  # tryceratops
  "TRY",
  # flake8-raise
  "RSE",
  # ruff-specific rules
  "RUF"
]

src = ["{{cookiecutter.project_name}}", "tests"]

ignore = ["D100", "E501"]

unfixable = ["B"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["D104", "E402"]
"tests/*" = ["S101"]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.mypy]
enable_error_code = ["truthy-bool", "redundant-expr"]

allow_redefinition =  false
check_untyped_defs = true
disallow_any_explicit = true
disallow_any_generics = true
# disallow_untyped_calls is false because: https://github.com/python/mypy/issues/10757
disallow_untyped_calls = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = false
ignore_errors = false
ignore_missing_imports = true
implicit_reexport = false
local_partial_types = true
no_implicit_optional = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_return_any = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true


[tool.isort]
profile = "black"


[tool.pytest.ini_options]
norecursedirs = [
  "hooks",
  "*.egg",
  ".eggs",
  "dist",
  "build",
  "docs",
  ".tox",
  ".git",
  "__pycache__"
]

# Strict `@xfail` by default:
xfail_strict = true


[tool.coverage.run]
source = [
    "erm_reporting"
]
command_line = "-m pytest"

[tool.coverage.report]
fail_under = 0
show_missing = true
precision = 2
skip_empty = true
